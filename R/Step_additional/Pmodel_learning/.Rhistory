print(p_gpp)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::load_all("D:/Github/ingestr/")
devtools::load_all("D:/Github/ingestr/")
devtools::load_all("D:/Github/rsofun/")
devtools::load_all("D:/Github/rsofun/")
library(rsofun)
library(rsofun)
library(dplyr)
library(ggplot2)
library(ggplot2)
pars <- list(par = c(
kphio           = 0.04607080,
soilm_par_a     = 2.75687824,
soilm_par_b     = 1.68140444,
tau_acclim_tempstress = 7.35259044,
par_shape_tempstress  = 0.09863961
))
library(rsofun)
#Beni prepare the EC gpp data(tidy from fluxnet) and p model drivers for p_model running analysis, load them:
#gpp data from EC
ddf_fluxnet_gpp <- read_rds(paste0("D:/Github/photocold/data/","ddf_fluxnet_gpp.rds"))
#p model drivers
p_model_fluxnet_drivers <- read_rds(paste0("D:/Github/photocold/data/","p_model_fluxnet_drivers.rds"))
#run the model using these parameters
output_subset<-c()
#
output_subset <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
# optimized parameters from previous work
params_modl <- list(
kphio           = 0.09423773,
soilm_par_a     = 0.33349283,
soilm_par_b     = 1.45602286,
tau_acclim_tempstress = 10,
par_shape_tempstress  = 0.0
)
#run the model using these parameters
output_subset<-c()
#
output_subset <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
View(output_subset)
rm(output_subset)
#run the model using these parameters
output<-c()
#
output<- rsofun::runread_pmodel_f(
p_model_fluxnet_drivers,
par = params_modl
)
View(output)
library(dplyr)
library(tidyr)
library(ggplot2)
# the main model output-->for each site
for (i in 1:nrow(output_subset)){
sitename_run<-output_subset$sitename[i]
model_data <- output_subset %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
validation_data <- ddf_fluxnet_gpp %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
p_gpp<-ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")
print(p_gpp)
}
library(dplyr)
library(tidyr)
library(ggplot2)
# the main model output-->for each site
for (i in 1:nrow(output)){
sitename_run<-output$sitename[i]
model_data <- output %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
validation_data <- ddf_fluxnet_gpp %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
p_gpp<-ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")
print(p_gpp)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::load_all("D:/Github/ingestr/")
devtools::load_all("D:/Github/rsofun/")
library(rsofun)
library(dplyr)
library(ggplot2)
pars <- list(par = c(
kphio           = 0.04607080,
soilm_par_a     = 2.75687824,
soilm_par_b     = 1.68140444,
tau_acclim_tempstress = 7.35259044,
par_shape_tempstress  = 0.09863961
))
#----------------
#data filtering
#----------------
#only selecting the sites that have complete early spring(based on the analysis from:
#D:\Github\photocold\analysis\Using_sites_in_Fluxnet2015)
sel_sites.path<-"D:\data\photocold_project\event_length\Using_sites_in_Fluxnet2015"
#----------------
#data filtering
#----------------
#only selecting the sites that have complete early spring(based on the analysis from:
#D:\Github\photocold\analysis\Using_sites_in_Fluxnet2015)
sel_sites.path<-"D:/data/photocold_project/event_length/Using_sites_in_Fluxnet2015/"
#----------------
#data filtering
#----------------
#only selecting the sites that have complete early spring(based on the analysis from:
#D:\Github\photocold\analysis\Using_sites_in_Fluxnet2015)
sel_sites.path<-"D:/data/photocold_project/event_length/Using_sites_in_Fluxnet2015/"
load(paste0(sel_sites.path,"df_events_length.RDA"))
sel_sites_info<-df_events_all
unique(df_events_all$sitename)
length(unique(df_events_all$sitename))
sel_sites<-unique(df_events_all$sitename)
head(ddf_flux_gpp)
#----------------
#prepared data by Beni
#----------------
#Beni prepare the EC gpp data(tidy from fluxnet) and p model drivers for p_model running analysis, load them:
#gpp data from EC
ddf_fluxnet_gpp <- read_rds(paste0("D:/Github/photocold/data/","ddf_fluxnet_gpp.rds"))
#p model drivers
p_model_fluxnet_drivers <- read_rds(paste0("D:/Github/photocold/data/","p_model_fluxnet_drivers.rds"))
head(ddf_fluxnet_gpp)
#hence only used the data from sel_sites:
df_fluxnet_gpp_sel<-ddf_fluxnet_gpp %>%
select(sitename %in% sel_sites)
#hence only used the data from sel_sites:
df_fluxnet_gpp_sel<-ddf_fluxnet_gpp %>%
filter(sitename %in% sel_sites)
p_model_fluxnet_drivers_sel<-p_model_fluxnet_drivers %>%
filter(sitename %in% sel_sites)
# optimized parameters from previous work-->first used this for running all the selected sites
params_modl <- list(
kphio           = 0.09423773,
soilm_par_a     = 0.33349283,
soilm_par_b     = 1.45602286,
tau_acclim_tempstress = 10,
par_shape_tempstress  = 0.0
)
#run the model using these parameters
output<-c()
#
output<- rsofun::runread_pmodel_f(
p_model_fluxnet_drivers_sel,
par = params_modl
)
library(dplyr)
library(tidyr)
library(tidyr)
library(ggplot2)
# the main model output-->for each site
for (i in 1:nrow(output)){
sitename_run<-output$sitename[i]
model_data <- output %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
validation_data <- df_fluxnet_gpp_sel %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
p_gpp<-ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")
print(p_gpp)
}
i
i=39
output$sitename[i]
ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")
model_data
range(model_data$date)
as.Date(model_data$date +90)
model_data$date[1]
model_data$date[1]+90
ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")
# the main model output-->for each site
for (i in 1:nrow(output)){
sitename_run<-output$sitename[i]
model_data <- output %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
validation_data <- df_fluxnet_gpp_sel %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
display_date<-model_data$date[1]+90  #start from the first date + 90 days
p_gpp<-ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")+
annotate(geom = "text",x=display_date,y=20,label=sitename_run)
print(p_gpp)
}
# the main model output-->for each site
for (i in 1:nrow(output)){
sitename_run<-output$sitename[i]
model_data <- output %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
validation_data <- df_fluxnet_gpp_sel %>%
filter(sitename==sitename_run)%>%
tidyr::unnest(data)
display_date<-model_data$date[1]+90  #start from the first date + 90 days
p_gpp<-ggplot() +
geom_line(data = model_data,
aes(date,gpp,col="modeled gpp")) +
geom_line(data = validation_data,
aes(date,gpp,col="EC gpp")) +
scale_color_manual("",values = c("modeled gpp"="tomato",
"EC gpp"="cyan2"))+
labs(x = "Date",y = "GPP(unit)")+
annotate(geom = "text",x=display_date,y=20,label=sitename_run)
print(p_gpp)
}
?calib_sofun
sitename_run
sel_sites
#(1)specify the optimization strategy:
settings <- list(
method              = "bayesiantools",
targetvars          = c("gpp"),
timescale           = list(targets_obs = "d"),
sitenames           = sitename_run,
metric              = cost_rmse_photocold,
dir_results         = "./",
name                = "FULL",  #!ask Koen if this corresponds to the Beni et al., 2020
control = list(
sampler = "DEzs",
settings = list(
burnin = 1000,
iterations = 5000
)
),
par = list(
kphio = list(lower=0.04, upper=0.1, init = 0.05),
soilm_par_a = list(lower=0, upper=5, init = 3.5),
soilm_par_b = list(lower=1, upper=5, init=3.5),
tau_acclim_tempstress = list(lower=0, upper=15, init=1),
par_shape_tempstress = list(lower=0, upper=0.1, init=0)
) #parameter variation range
)
#(1)specify the optimization strategy:
settings <- list(
method              = "bayesiantools",
targetvars          = c("gpp"),
timescale           = list(targets_obs = "d"),
sitenames           = sitename_run,
metric              = cost_rmse_photocold,
dir_results         = "./",
name                = "FULL",  #!ask Koen if this corresponds to the Beni et al., 2020
control = list(
sampler = "DEzs",
settings = list(
burnin = 1000,
iterations = 5000
)
),
par = list(
kphio = list(lower=0.04, upper=0.1, init = 0.05),
soilm_par_a = list(lower=0, upper=5, init = 3.5),
soilm_par_b = list(lower=1, upper=5, init=3.5),
tau_acclim_tempstress = list(lower=0, upper=15, init=1),
par_shape_tempstress = list(lower=0, upper=0.1, init=0)
) #parameter variation range
)
#(2) calibrate the model and optimize free parameters
pars <- suppressWarnings(
calib_sofun(
drivers = p_model_fluxnet_drivers_sel,
obs = df_fluxnet_gpp_sel,
settings = settings
)
)
View(pars)
pars
pars_calib <- readRDS("D:/Github/photocold/data/pars_calib.rds")
View(params_modl)
pars_calib
output$sitename[i]
i
i=1
#(1)prepare the data(model and EC based gpp)
sitename_run<-output$sitename[i]
i=1
p_model_fluxnet_drivers_sel[i,]
df_fluxnet_gpp_sel[i,]
p_model_fluxnet_drivers_sel$sitename
df_fluxnet_gpp_sel$sitename
i=1
#calibrate the model and optimize free parameters
pars <- suppressWarnings(
calib_sofun(
drivers = p_model_fluxnet_drivers_sel[i,],
obs = df_fluxnet_gpp_sel[i,],
settings = settings
)
)
pars
View(pars_calib)
str(df_fluxnet_gpp_sel)
head(df_fluxnet_gpp_sel)
pars
str(pars)
unlist(pars)
#calibrate the model and optimize free parameters
pars <- suppressWarnings(
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
calib_sofun(
#calibrate the model and optimize free parameters
pars <- suppressWarnings(
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
calib_sofun(
i=1
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
sitename_run
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=pars)
View(pars_temp)
pars
str(pars)
i=1
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
#calibrate the model and optimize free parameters
pars_calib <- suppressWarnings(
calib_sofun(
drivers = p_model_fluxnet_drivers_sel[i,],
obs = df_fluxnet_gpp_sel[i,],
settings = settings
)
)
pars_calib
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=pars_calib)
View(pars_temp)
pars_calib
View(p_model_fluxnet_drivers_sel)
t<-p_model_fluxnet_drivers_sel[c(1:3),]
View(t)
str(t)
pars_calib_dataframe<-as.data.frame(pars_calib)
pars_calib_dataframe
View(pars_calib_dataframe)
tibble(pars_calib_dataframe)
tibble(pars_calib_dataframe)
tibble(t(pars_calib_dataframe))
tibble(t(pars_calib_dataframe))
pars_calib_dataframe<-as.data.frame(t(pars_calib))
pars_calib_dataframe
pars_calib)
pars_calib
unlist(pars_calib)
as.data.frame(unlist(pars_calib))
as.data.frame(unlist(pars_calib))
pars_calib_dataframe<-unlist(pars_calib)
pars_calib_dataframe
tibble(pars_calib_dataframe)
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=pars_calib_dataframe)
View(pars_temp)
pars_calib_dataframe
View(t)
as_tibble(pars_calib_dataframe)
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=as_tibble(pars_calib_dataframe))
View(pars_temp)
pars_calib
pars_calib_dataframe<-unlist(pars_calib)
pars_calib_unlist<-unlist(pars_calib)
pars_calib_unlist
as_tibble(pars_calib_unlist)
str(t)
pars_calib_unlist
as.date.frame(pars_calib_unlist)
as.data.frame(pars_calib_unlist)
as.data.frame(pars_calib_unlist)
t(as.data.frame(pars_calib_unlist))
as_tibble(t(as.data.frame(pars_calib_unlist)))
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=as_tibble(t(as.data.frame(pars_calib_unlist))))
View(pars_temp)
t
t[1,]
t[1,2]
#create tibble files:
pars_temp<-tibble(sitename=sitename_run,pars=list(as_tibble(t(as.data.frame(pars_calib_unlist)))))
View(pars_temp)
View(pars_temp[[2]][[1]])
#(2) Calibrating the paramters for each site:
pars_calib_allsites<-c()
# for (i in 1:nrow(output_subset)){
for (i in 1:2){
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
#calibrate the model and optimize free parameters
pars_calib <- suppressWarnings(
calib_sofun(
drivers = p_model_fluxnet_drivers_sel[i,],
obs = df_fluxnet_gpp_sel[i,],
settings = settings
)
)
pars_calib_unlist<-unlist(pars_calib)
#create tibble files-->successfully at the end Nov-22,2021
pars_temp<-tibble(sitename=sitename_run,pars=list(as_tibble(t(as.data.frame(pars_calib_unlist)))))
pars_calib_allsites<-rbind(pars_calib_allsites,pars_temp)
}
#(a)prepare the data(model and EC based gpp)
sitename_run<-output$sitename[i]
pars_calib_allsites
View(pars_temp[[2]][[1]])
pars_calib
#(2) Calibrating the paramters for each site:
pars_calib_allsites<-c()
for (i in 1:nrow(output)){
sitename_run<-p_model_fluxnet_drivers_sel$sitename[i]
#calibrate the model and optimize free parameters
pars_calib <- suppressWarnings(
calib_sofun(
drivers = p_model_fluxnet_drivers_sel[i,],
obs = df_fluxnet_gpp_sel[i,],
settings = settings
)
)
pars_calib_unlist<-unlist(pars_calib)
#create tibble files-->successfully at the end Nov-22,2021
pars_temp<-tibble(sitename=sitename_run,pars=list(as_tibble(t(as.data.frame(pars_calib_unlist)))))
pars_calib_allsites<-rbind(pars_calib_allsites,pars_temp)
}
View(pars_temp)
View(pars_calib_allsites)
View(pars_calib_allsites[[2]][[1]])
View(pars_calib_allsites[[2]][[2]])
pars_calib_allsites[2:3]
pars_calib_allsites[2:3，]
View(pars_calib_allsites[[2]][[3]])
unlist(pars_calib_allsites[2,])
unlist(pars_calib_allsites[2,])
View(pars_calib_allsites[[2]][[1]])
tt<-pars_calib_allsites[1,]
View(tt)
View(tt[[2]][[1]])
View(tt)
View(tt[[2]][[1]])
pars_calib
pars_calib_unlist
unlist(pars_calib$par)
#create tibble files-->successfully at the end Nov-22,2021
pars_temp<-tibble(sitename=sitename_run,pars=list(as_tibble(t(as.data.frame(pars_calib_unlist)))))
View(pars_temp)
View(pars_temp[[2]][[1]])
pars_calib_unlist<-unlist(pars_calib$par)
#create tibble files-->successfully at the end Nov-22,2021
pars_temp<-tibble(sitename=sitename_run,pars=list(as_tibble(t(as.data.frame(pars_calib_unlist)))))
View(pars_temp)
View(pars_temp[[2]][[1]])
#save the calibrated parameters:
save.path<-"D:/data/photocold_project/p_model_results/calibrated_parameters/"
save(pars_calib_allsites,file=paste0(save.path,"pars_calib.RDA"))
load("D:/data/photocold_project/p_model_results/calibrated_parameters/pars_calib.RDA")
View(pars_calib_allsites)
fix(pars_calib)
fix(calib_sofun)
