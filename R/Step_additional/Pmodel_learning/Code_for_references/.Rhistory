#-----------------------------
#optimized parameters from previous work:
params_modl <- list(
kphio           = 0.09423773,
soilm_par_a     = 0.33349283,
soilm_par_b     = 1.45602286,
tau_acclim_tempstress = 10,
par_shape_tempstress  = 0.0
)
# run the model for these parameters
output <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
#-----------------------------------
#plotting output
#-----------------------------------
#We can now visualize both the model output and the measured values together.
library(dplyr)
library(tidyr)
library(ggplot2)
#
# we only have one site so we'll unnest the main model output
model_data <- output %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
validation_data <- p_model_validation %>%
tidyr::unnest(data)
ggplot() +
geom_point(
data = model_data,aes(date,gpp),colour = "red") +
geom_point(data = validation_data,aes(date,gpp)) +
labs(x = "Date",y = "GPP")
#-----------------------------------
#Calibrating model parameter
#-----------------------------------
#To optimize new parameters based upon driver data and a validation dataset,
#we must first specify an optimization strategy and settings, as well as parameter ranges.
settings <- list(
method              = "bayesiantools",
targetvars          = c("gpp"),
timescale           = list(targets_obs = "y"),
sitenames           = "FR-Pue",
metric              = cost_rmse_kphio,
dir_results         = "./",
name                = "ORG",
control = list(
sampler = "DEzs",
settings = list(
burnin = 1000,
iterations = 5000
)
),
par = list(
kphio = list(lower=0.04, upper=0.1, init = 0.05),
a = list(lower=0, upper=5, init = 3.5),
b = list(lower=1, upper=5, init=3.5),
tau = list(lower=0, upper=15, init=1),
shape = list(lower=0, upper=0.1, init=0)
)
)
# calibrate the model and
# optimize free parameters
pars <- calib_sofun(
drivers = p_model_drivers,
obs = p_model_validation,
settings = settings
)
#When successful the optimized parameters can be used to run subsequent modelling efforts,
#in this case slightly improving the model fit over a more global parameter set.
# reformatting the parameter list
params_modl <- list(
kphio           = pars$par[1],
soilm_par_a     = pars$par[2],
soilm_par_b     = pars$par[3],
tau_acclim_tempstress = pars$par[4],
par_shape_tempstress  = pars$par[5]
)
# run the model for these parameters
output_new <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
# we only have one site so we'll unnest
# the main model output
model_data_new <- output_new %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
ggplot() +
geom_point(data = model_data,aes(date,gpp),colour = "red") +
geom_point(data = validation_data,aes(date,gpp)) +
geom_point(data = model_data_new,aes(date,gpp),colour = "blue") +
labs(x = "Date",y = "GPP")
##################################################
#adopt the script from the koen:
#-->adopt from https://github.com/bluegreen-labs/sofunCalVal/tree/main/data
##################################################
# Routine to format the benchmark driver dataset
# based upon FLUXNET data. This routine assumes
# that the code is run on th Euler compute infrastructure
#
# The data generated is meant to drive the p-model
# and provide a good working / test dataset.
# The routine used is largely based on previous work
# REFERENCE PAPER BENI.
# Libraries, check for Euler access ----
library(tidyverse)
library(rsofun)
library(ingestr)
if(!grepl('eu-', Sys.info()['nodename'])){
stop("You are not on Euler, source data unavailable - abort abort abort!")
}
# Libraries, check for Euler access ----
library(tidyverse)
library(rsofun)
library(ingestr)
library(rsofun)
#-------------------------------
#load the demo datasets:p_model_drivers and p_model_validation
#-------------------------------
p_model_drivers
p_model_validation
#-----------------------------
#Running the model:
#-----------------------------
#optimized parameters from previous work:
params_modl <- list(
kphio           = 0.09423773,
soilm_par_a     = 0.33349283,
soilm_par_b     = 1.45602286,
tau_acclim_tempstress = 10,
par_shape_tempstress  = 0.0
)
# run the model for these parameters
output <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
#-----------------------------------
#plotting output
#-----------------------------------
#We can now visualize both the model output and the measured values together.
library(dplyr)
library(tidyr)
library(ggplot2)
#
# we only have one site so we'll unnest the main model output
model_data <- output %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
validation_data <- p_model_validation %>%
tidyr::unnest(data)
ggplot() +
geom_point(
data = model_data,aes(date,gpp),colour = "red") +
geom_point(data = validation_data,aes(date,gpp)) +
labs(x = "Date",y = "GPP")
#-----------------------------------
#Calibrating model parameter
#-----------------------------------
#To optimize new parameters based upon driver data and a validation dataset,
#we must first specify an optimization strategy and settings, as well as parameter ranges.
settings <- list(
method              = "bayesiantools",
targetvars          = c("gpp"),
timescale           = list(targets_obs = "y"),
sitenames           = "FR-Pue",
metric              = cost_rmse_kphio,
dir_results         = "./",
name                = "ORG",
control = list(
sampler = "DEzs",
settings = list(
burnin = 1000,
iterations = 5000
)
),
par = list(
kphio = list(lower=0.04, upper=0.1, init = 0.05),
a = list(lower=0, upper=5, init = 3.5),
b = list(lower=1, upper=5, init=3.5),
tau = list(lower=0, upper=15, init=1),
shape = list(lower=0, upper=0.1, init=0)
)
)
# calibrate the model and
# optimize free parameters
pars <- calib_sofun(
drivers = p_model_drivers,
obs = p_model_validation,
settings = settings
)
#When successful the optimized parameters can be used to run subsequent modelling efforts,
#in this case slightly improving the model fit over a more global parameter set.
# reformatting the parameter list
params_modl <- list(
kphio           = pars$par[1],
soilm_par_a     = pars$par[2],
soilm_par_b     = pars$par[3],
tau_acclim_tempstress = pars$par[4],
par_shape_tempstress  = pars$par[5]
)
# run the model for these parameters
output_new <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
# we only have one site so we'll unnest
# the main model output
model_data_new <- output_new %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
ggplot() +
geom_point(data = model_data,aes(date,gpp),colour = "red") +
geom_point(data = validation_data,aes(date,gpp)) +
geom_point(data = model_data_new,aes(date,gpp),colour = "blue") +
labs(x = "Date",y = "GPP")
library(ingestr)
library(rsofun)
##########################################
#download the PhenoCam data from PhenoCam US (specifically for the SPRUCE experimental sites)
# https://phenocam.sr.unh.edu/webcam/
##########################################
#------------------------------------
#(1).check the data for SPRUCE experiment
#------------------------------------
#load package
library(data.table)
library(phenocamapi)
# the metadata as data.table
phenos <- get_phenos()
#-------------------------------------------------
#a. Filtering the Phenocam dataset using attributes
#list the sites with "spruce.."
#--------------------------------------------------
sel_sites<-phenos[grep("spruce",phenos$site),]
#-------------------------------------------------
#b. further filtering the sites: group=="SPRUCE"
#and active==TRUE
#--------------------------------------------------
sel_sites<-sel_sites[sel_sites$group=="SPRUCE" & sel_sites$active==TRUE,]
#------------------------------------
#(2).confirm the meaning of the names to prepare the further analysis:
#------------------------------------
#referring the details in Andrew's paper:https://www.nature.com/articles/s41586-018-0399-1
#especially the experimental plot in Hanson et al., 2016(https://bg.copernicus.org/preprints/bg-2016-449/bg-2016-449.pdf)
#a.here I only select the treatments that plants within the constructed enclousres.
df_final<-sel_sites[-c(1:6),]
#for the treatments-->here is the meaning of the acroyoms
#e.g. P06 and P19E-->plot 06 and plot 19 are the chambered temperature control and E means elevated
#separate the Tree and shrub(underground)
#Shurb
df_final_Shurb<-df_final[df_final$primary_veg_type=="SH",]
#Trees
pos<-match(df_final_Shurb$site,df_final$site)
pos_tree<-setdiff(c(1:length(df_final$site)),pos)
df_final_Tree<-df_final[pos_tree,]
#----------------------------------------
#(3).download the data from the PhenoCam USA
#----------------------------------------
Meta.info_Tree<-as.data.frame(df_final_Tree)
Meta.info_Shurb<-as.data.frame(df_final_Shurb)
#download the data through the R package phenocamapi
library(phenocamapi)
#a.write the function to download the PhenoCam data
ts_download<-function(Site,VegType,RoiID,Type){
# Site="spruceT0P06"
# VegType="EN"
# RoiID=c(1000)
# Type="1day"
##download the data
data_df<-c()
df_names<-paste0(VegType,"_",RoiID)
for(i in 1:length(RoiID)){
data_temp<-get_pheno_ts(site=Site,vegType = VegType,roiID = RoiID[i],type = Type)
#add PFT and ROI_name
data_temp$PFT<-rep(VegType,nrow(data_temp))
data_temp$RoiID<-RoiID[i]
data_df<-rbind(data_df,data_temp)
}
return(data_df)
}
#start to downloading the phenocam data
#
save.path<-"D:/CES/Data_for_use/PhenoCam_Data/Through_PhenoCam_USA/VIs/SPRUCE/"
########
#for the trees
########
#need to confirm the PFT in each treatment and select the ENF ROIs for analysis:
#T0P06:select EN_1000; T0P19E: select EN_1000
#T2P20:select EN_1000; T2P11E:select EN_1000
#T4P13:select EN_1000; T4P04E: select EN_1000
#T6P08:select EN_1000 T6P16E:select EN_1000
#T9P17 and T9P10E:select EN_1000(2015-2018;looks kind of abnormal) and EN_2000(2018-present)
#
SPRUCE_T0ACO2_EN<-ts_download("spruceT0P06","EN",c(1000),"1day")
SPRUCE_T0ECO2_EN<-ts_download("spruceT0P19E","EN",c(1000),"1day")
SPRUCE_T2ACO2_EN<-ts_download("spruceT2P20","EN",c(1000),"1day")
SPRUCE_T2ECO2_EN<-ts_download("spruceT2P11E","EN",c(1000),"1day")
SPRUCE_T4ACO2_EN<-ts_download("spruceT4P13","EN",c(1000),"1day")
SPRUCE_T4ECO2_EN<-ts_download("spruceT4P04E","EN",c(1000),"1day")
SPRUCE_T6ACO2_EN<-ts_download("spruceT6P08","EN",c(1000),"1day")
SPRUCE_T6ECO2_EN<-ts_download("spruceT6P16E","EN",c(1000),"1day")
SPRUCE_T9ACO2_EN<-ts_download("spruceT9P17","EN",c(1000,2000),"1day")
SPRUCE_T9ECO2_EN<-ts_download("spruceT9P10E","EN",c(1000,2000),"1day")
#----------------------------
##test for T9 treatments-->determine which data are better
#----------------------------
SPRUCE_T9ACO2_EN$date<-as.POSIXct(SPRUCE_T9ACO2_EN$date)
SPRUCE_T9ECO2_EN$date<-as.POSIXct(SPRUCE_T9ECO2_EN$date)
ggplot(data=SPRUCE_T9ACO2_EN,aes(x=date,y=gcc_90,col=RoiID))+
geom_point() #data from ROI 1000 are smaller than ROI 2000
#
t1<-SPRUCE_T9ACO2_EN[SPRUCE_T9ACO2_EN$date>=as.POSIXct("2018-01-01")&SPRUCE_T9ACO2_EN$date<=as.POSIXct("2018-03-31")]
ggplot(data=t1,aes(x=date,y=gcc_90,col=RoiID))+
geom_point()
#
t1_1000<-t1[RoiID=="1000",]
t1_2000<-t1[RoiID=="2000",]
lm_gcc90<-lm(t1_1000$gcc_90~t1_2000$gcc_90)
lm_rcc90<-lm(t1_1000$rcc_90~t1_2000$rcc_90)
ggplot(data=SPRUCE_T9ECO2_EN,aes(x=date,y=gcc_90,col=RoiID))+
geom_point() #data between ROI 1000 and ROI2000 are consistent
#-->data before 2018 using the ROI 1000,the rest of period using data from ROI2000
#----------------------------
##adjust the data in T9ACO2 and T9ECO2
#----------------------------
#I.for T9ACO2-->(,2018-03-31],using the data from ROI1000
#[2018-04-01,...]-->using the data from ROI2000-->gcc_90 and rcc_90 adjusted according to the test above:
SPRUCE_T9ACO2_EN$date<-as.POSIXct(SPRUCE_T9ACO2_EN$date)
data_seg1<-SPRUCE_T9ACO2_EN[SPRUCE_T9ACO2_EN$RoiID==1000 & SPRUCE_T9ACO2_EN$date<=as.POSIXct("2018-03-31")]
data_seg2<-SPRUCE_T9ACO2_EN[SPRUCE_T9ACO2_EN$RoiID==2000 & SPRUCE_T9ACO2_EN$date>as.POSIXct("2018-03-31")]
#adjust gcc_90 and rcc_90:
data_seg2$gcc_90<-coef(lm_gcc90)[1]+data_seg2$gcc_90*coef(lm_gcc90)[2]
data_seg2$rcc_90<-coef(lm_rcc90)[1]+data_seg2$rcc_90*coef(lm_rcc90)[2]
#
data_merge<-rbind(data_seg1,data_seg2)
ggplot(data=data_merge,aes(x=date,y=rcc_90,col=RoiID))+
geom_point()
ggplot(data=SPRUCE_T9ACO2_EN,aes(x=date,y=rcc_90,col=RoiID))+
geom_point()
#it seems the Camera after 2018 has some problem(degaraded?)-->hence do not use the data after 2018-03-31
data_new<-data_seg1
SPRUCE_T9ACO2_EN<-data_new
#I.for T9ECO2-->(,2018-03-31],using the data from ROI1000
#[2018-04-01,...]-->using the data from ROI2000
data_seg1<-SPRUCE_T9ECO2_EN[SPRUCE_T9ECO2_EN$RoiID==1000 & SPRUCE_T9ECO2_EN$date<=as.POSIXct("2018-03-31")]
data_seg2<-SPRUCE_T9ECO2_EN[SPRUCE_T9ECO2_EN$RoiID==2000 & SPRUCE_T9ECO2_EN$date>as.POSIXct("2018-03-31")]
data_merge<-rbind(data_seg1,data_seg2)
ggplot(data=data_merge,aes(x=date,y=gcc_90,col=RoiID))+
geom_point()
SPRUCE_T9ECO2_EN<-data_merge
source('C:/Users/yluo/Desktop/R_testcode/PhotoCold/Second_round_of_code/R/Step_additional/explore_further_using_PhenoCam_data/SPRUCE_gradient/Compare_VIs_in_treatments.R', echo=TRUE)
plot_VIs_EN
##################################################
#p-model running-->update demo sent by Koen:
#-->adopt from https://stineb.github.io/rsofun/articles/pmodel_use.html
##################################################
#install the rsofun R package:
if(!require(devtools)){install.packages(devtools)}
devtools::install_github("stineb/rsofun")
library(rsofun)
#-------------------------------
#load the demo datasets:p_model_drivers and p_model_validation
#-------------------------------
p_model_drivers
p_model_validation
#-----------------------------
#Running the model:
#-----------------------------
#optimized parameters from previous work:
params_modl <- list(
kphio           = 0.09423773,
soilm_par_a     = 0.33349283,
soilm_par_b     = 1.45602286,
tau_acclim_tempstress = 10,
par_shape_tempstress  = 0.0
)
# run the model for these parameters
output <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
#-----------------------------------
#plotting output
#-----------------------------------
#We can now visualize both the model output and the measured values together.
library(dplyr)
library(tidyr)
library(ggplot2)
#
# we only have one site so we'll unnest the main model output
model_data <- output %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
p_model_drivers
p_model_drivers
data("p_model_drivers")
force(p_model_drivers)
View(p_model_drivers)
View(p_model_drivers[[2]][[1]])
View(p_model_drivers[[3]][[1]])
View(p_model_drivers[[4]][[1]])
View(p_model_drivers[[5]][[1]])
# run the model for these parameters
output <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
View(output)
View(output[[2]][[1]])
View(output[[3]][[1]])
#-----------------------------------
#plotting output
#-----------------------------------
#We can now visualize both the model output and the measured values together.
library(dplyr)
library(tidyr)
library(ggplot2)
#
# we only have one site so we'll unnest the main model output
model_data <- output %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
View(output)
View(model_data)
View(model_data[[2]][[1]])
validation_data <- p_model_validation %>%
tidyr::unnest(data)
ggplot() +
geom_point(
data = model_data,aes(date,gpp),colour = "red") +
geom_point(data = validation_data,aes(date,gpp)) +
labs(x = "Date",y = "GPP")
ggplot() +
geom_point(
data = model_data,aes(date,gpp,col = "model")) +
geom_point(data = validation_data,aes(date,gpp,col="obs")) +
labs(x = "Date",y = "GPP")
View(params_modl)
#-----------------------------------
#Calibrating model parameter
#-----------------------------------
#To optimize new parameters based upon driver data and a validation dataset,
#we must first specify an optimization strategy and settings, as well as parameter ranges.
settings <- list(
method              = "bayesiantools",
targetvars          = c("gpp"),
timescale           = list(targets_obs = "y"),
sitenames           = "FR-Pue",
metric              = cost_rmse_kphio,
dir_results         = "./",
name                = "ORG",
control = list(
sampler = "DEzs",
settings = list(
burnin = 1000,
iterations = 5000
)
),
par = list(
kphio = list(lower=0.04, upper=0.1, init = 0.05),
a = list(lower=0, upper=5, init = 3.5),
b = list(lower=1, upper=5, init=3.5),
tau = list(lower=0, upper=15, init=1),
shape = list(lower=0, upper=0.1, init=0)
)
)
# calibrate the model and
# optimize free parameters
pars <- calib_sofun(
drivers = p_model_drivers,
obs = p_model_validation,
settings = settings
)
#When successful the optimized parameters can be used to run subsequent modelling efforts,
#in this case slightly improving the model fit over a more global parameter set.
# reformatting the parameter list
params_modl <- list(
kphio           = pars$par[1],
soilm_par_a     = pars$par[2],
soilm_par_b     = pars$par[3],
tau_acclim_tempstress = pars$par[4],
par_shape_tempstress  = pars$par[5]
)
# run the model for these parameters
output_new <- rsofun::runread_pmodel_f(
p_model_drivers,
par = params_modl
)
# we only have one site so we'll unnest
# the main model output
model_data_new <- output_new %>%
dplyr::filter(sitename == "FR-Pue") %>%
tidyr::unnest(data)
ggplot() +
geom_point(data = model_data,aes(date,gpp,col = "ori-model")) +
geom_point(data = validation_data,aes(date,gpp,col="obs")) +
geom_point(data = model_data_new,aes(date,gpp,col="cal-model")) +
labs(x = "Date",y = "GPP")
ggplot() +
geom_point(data = model_data,aes(date,gpp,col = "ori-model")) +
geom_point(data = validation_data,aes(date,gpp,col="obs")) +
geom_point(data = model_data_new,aes(date,gpp,col="cal-model")) +
labs(x = "Date",y = "GPP")+
theme_bw()
ggplot() +
geom_point(
data = model_data,aes(date,gpp,col = "model")) +
geom_point(data = validation_data,aes(date,gpp,col="obs")) +
labs(x = "Date",y = "GPP")+
theme_bw()
